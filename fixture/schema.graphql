"""
Comprehensive GraphQL schema for Mearie fixture demonstrating all GraphQL specification features.

This schema uses Wikipedia movie data (movies, people, genres) from the fixture data files,
and generates review data dynamically using faker-js.
"""
schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

# ==============================================================================
# Custom Scalars
# ==============================================================================

"""
ISO 8601 formatted date-time string (e.g., "2024-03-15T10:30:00Z")
"""
scalar DateTime

"""
Valid HTTP or HTTPS URL string
"""
scalar URL

# ==============================================================================
# Interfaces
# ==============================================================================

"""
Global object identification interface following the Relay specification.
All objects that can be refetched by ID implement this interface.
"""
interface Node {
  """
  Globally unique identifier
  """
  id: ID!
}

"""
Movie credit interface for both cast and crew members.
Implemented by Cast and Crew types.
"""
interface Credit {
  """
  Unique credit identifier
  """
  id: ID!

  """
  Person who received this credit
  """
  person: Person!
}

# ==============================================================================
# Object Types - Core Entities (from fixture data)
# ==============================================================================

"""
A cast member (actor) credit for a movie with character information
"""
type Cast implements Credit {
  """
  Unique credit identifier
  """
  id: ID!

  """
  Person who received this credit
  """
  person: Person!

  """
  Character name portrayed by the actor
  """
  character: String
}

"""
A crew member credit for a movie with job information
"""
type Crew implements Credit {
  """
  Unique credit identifier
  """
  id: ID!

  """
  Person who received this credit
  """
  person: Person!

  """
  Department (e.g., "Directing", "Writing", "Production")
  """
  department: String

  """
  Specific job title (e.g., "Director", "Screenplay", "Producer")
  """
  job: String
}

"""
A movie with metadata including plot and cast information
"""
type Movie implements Node {
  """
  Unique movie identifier
  """
  id: ID!

  """
  Movie title
  """
  title: String!

  """
  Plot summary
  """
  plot: String!

  """
  Movie poster image URL
  """
  posterUrl: URL

  """
  Movie backdrop/banner image URL
  """
  backdropUrl: URL

  """
  IMDB identifier (e.g., "tt0137523")
  """
  imdbId: String

  """
  Full release date
  """
  releaseDate: DateTime

  """
  Runtime in minutes
  """
  runtime: Int

  """
  Average rating from 0 to 10
  """
  rating: Float

  """
  Full credits including both cast and crew
  """
  credits: [Credit!]!

  """
  Genres associated with this movie
  """
  genres: [Genre!]!

  """
  Reviews submitted for this movie
  """
  reviews: [Review!]!

  """
  Number of likes this movie has received
  """
  likeCount: Int!

  """
  Number of dislikes this movie has received
  """
  dislikeCount: Int!
}

"""
A person (actor) who appeared in movies
"""
type Person implements Node {
  """
  Unique person identifier
  """
  id: ID!

  """
  Person's name
  """
  name: String!

  """
  Person's photo or profile image URL
  """
  imageUrl: URL

  """
  Movies this person appeared in
  """
  movies: [Movie!]!
}

"""
A movie genre category
"""
type Genre implements Node {
  """
  Genre identifier (lowercase with hyphens)
  """
  id: ID!

  """
  Human-readable genre name
  """
  name: String!

  """
  Movies associated with this genre
  """
  movies: [Movie!]!
}

# ==============================================================================
# Object Types - Generated Entities (faker-js data)
# ==============================================================================

"""
A user review and rating for a movie.
Reviews are generated dynamically and not stored in fixture data.
"""
type Review implements Node {
  """
  Unique review identifier
  """
  id: ID!

  """
  Movie being reviewed
  """
  movie: Movie!

  """
  Rating from 0.5 to 10.0
  """
  rating: Float!

  """
  Optional review text
  """
  text: String

  """
  Timestamp when the review was created
  """
  createdAt: DateTime!
}

# ==============================================================================
# Pagination Types - Cursor-based (Relay Connection Pattern)
# ==============================================================================

"""
Pagination information for cursor-based connections
"""
type PageInfo {
  """
  Whether there are more items when paginating forward
  """
  hasNextPage: Boolean!

  """
  Whether there are more items when paginating backward
  """
  hasPreviousPage: Boolean!

  """
  Cursor pointing to the first item in the current page
  """
  startCursor: String

  """
  Cursor pointing to the last item in the current page
  """
  endCursor: String
}

"""
Edge type wrapping a Movie with its cursor
"""
type MovieEdge {
  """
  Cursor for this edge, used for pagination
  """
  cursor: String!

  """
  The Movie at this edge
  """
  node: Movie!
}

"""
Paginated connection of movies following the Relay cursor specification
"""
type MovieConnection {
  """
  List of movie edges
  """
  edges: [MovieEdge!]!

  """
  Pagination metadata
  """
  pageInfo: PageInfo!

  """
  Total number of movies available (across all pages)
  """
  totalCount: Int!
}

# ==============================================================================
# Pagination Types - Offset-based
# ==============================================================================

"""
Paginated list of people using offset-based pagination
"""
type PaginatedPeople {
  """
  People in the current page
  """
  items: [Person!]!

  """
  Total number of people available (across all pages)
  """
  total: Int!

  """
  Current offset position
  """
  offset: Int!

  """
  Maximum number of items per page
  """
  limit: Int!

  """
  Whether there are more people after this page
  """
  hasMore: Boolean!
}

# ==============================================================================
# Union Types
# ==============================================================================

"""
Search results can be movies or people
"""
union SearchResult = Movie | Person

# ==============================================================================
# Input Types
# ==============================================================================

"""
Filter criteria for querying movies
"""
input MovieFilterInput {
  """
  Filter by genre IDs
  """
  genreIds: [ID!]
}

"""
Input for creating a movie review
"""
input CreateReviewInput {
  """
  ID of the movie to review
  """
  movieId: ID!

  """
  Rating from 1.0 to 5.0
  """
  rating: Float!

  """
  Optional review text
  """
  text: String
}

# ==============================================================================
# Query Root
# ==============================================================================

"""
Root query type providing access to all data
"""
type Query {
  """
  Fetch any object by its global ID (Relay specification)
  """
  node(id: ID!): Node

  # --------------------------------------------------------------------------
  # Single object lookups
  # --------------------------------------------------------------------------

  """
  Get a movie by ID
  """
  movie(id: ID!): Movie

  """
  Get a person by ID
  """
  person(id: ID!): Person

  """
  Get a genre by ID
  """
  genre(id: String!): Genre

  # --------------------------------------------------------------------------
  # List queries with different pagination styles
  # --------------------------------------------------------------------------

  """
  List movies with cursor-based pagination (Relay Connection pattern).
  Demonstrates forward pagination with cursors.
  """
  movies(
    """
    Number of movies to return (max 100)
    """
    first: Int = 20

    """
    Cursor to paginate after
    """
    after: String

    """
    Optional filters to apply
    """
    filter: MovieFilterInput
  ): MovieConnection!

  """
  List people with offset-based pagination.
  Demonstrates traditional offset/limit pagination.
  """
  people(
    """
    Number of items to skip
    """
    offset: Int = 0

    """
    Maximum number of people to return
    """
    limit: Int = 20
  ): PaginatedPeople!

  """
  Get all genres (no pagination)
  """
  genres: [Genre!]!

  # --------------------------------------------------------------------------
  # Search
  # --------------------------------------------------------------------------

  """
  Search across movies and people.
  Returns a union type that can be either.
  """
  search(
    """
    Search query string
    """
    query: String!

    """
    Maximum number of results to return
    """
    limit: Int = 10
  ): [SearchResult!]!
}

# ==============================================================================
# Mutation Root
# ==============================================================================

"""
Root mutation type for modifying data
"""
type Mutation {
  # --------------------------------------------------------------------------
  # Review mutations
  # --------------------------------------------------------------------------

  """
  Create a review for a movie
  """
  createReview(input: CreateReviewInput!): Review!

  """
  Delete a review by ID
  """
  deleteReview(id: ID!): Boolean!

  # --------------------------------------------------------------------------
  # Like mutations
  # --------------------------------------------------------------------------

  """
  Like a movie
  """
  likeMovie(movieId: ID!): Movie!

  """
  Dislike a movie
  """
  dislikeMovie(movieId: ID!): Movie!
}

# ==============================================================================
# Subscription Root
# ==============================================================================

"""
Root subscription type for real-time updates
"""
type Subscription {
  """
  Subscribe to new reviews being submitted
  """
  reviewAdded: Review!
}
